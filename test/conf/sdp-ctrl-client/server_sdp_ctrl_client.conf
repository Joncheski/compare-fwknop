################################################################
# Example configuration file for SDP Control Client Module
#
################################################################


# Port that SDP Controller is listening on
# 
CTRL_PORT                       5000



# Address/URL at which the SDP Controller resides
#
CTRL_ADDR                       127.0.0.1



# Indicates whether a SPA packet must be sent first in order to
# connect to the SDP Controller. Default is no.
#
USE_SPA                         N



# Path to fwknop client program for sending SPA to controller
# gateway. Default is 'fwknop', meaning the system default will
# be used.
#
FWKNOP_PATH                     ../client/.libs/fwknop



# Name of stanza in fwknoprc file with options to send SPA to 
# controller gateway.
#
CTRL_STANZA                     sdp_ctrl_gate



# Indicates whether this client should remain connected and 
# periodically request updates from the controller. Default
# is no.
# 
REMAIN_CONNECTED                Y



# If set to 'N', the client will daemonize and run in the 
# background. Default is yes.
#
#FOREGROUND                      Y


# Set to 'Y' to write to syslog facility even when running
# in foreground. Syslog is used automatically when running
# the client as a daemon. If running the client in the 
# foreground, this defaults to no.
#
USE_SYSLOG			N


# A number indicating what priority level messages to print
# and/or log. This accepts a range of zero to 7. The default 
# is 6 = LOG_INFO. The levels are as follows:
# LOG_EMERG	0
# LOG_ALERT	1
# LOG_CRIT	2
# LOG_ERR	3
# LOG_WARNING	4
# LOG_NOTICE	5
# LOG_INFO	6
# LOG_DEBUG	7
#  
VERBOSITY       6

# Location of the PID lockfile to be created and maintained by
# the client if the client is configured to daemonize
# 
#PID_FILE                        /var/run/sdp_ctrl_client.pid
PID_FILE                        ./sdptmp/server_sdp_ctrl_client.pid



# Location of key file for encrypted communications with the
# controller
#
KEY_FILE                        ./sdptmp/server.key



# Location of certificate file for encrypted communications with
# the controller
#
CERT_FILE                       ./sdptmp/server.crt



# SPA encryption key for this SDP network
#
SPA_ENCRYPTION_KEY              z8ngq6MaidxxStiUHk0CECm0CBSuYUvyD8zb99oliV4=



# SPA HMAC key for this SDP network
#
SPA_HMAC_KEY                    60stItDmZeQNWz8ODvz1fdchhYp3h+finZieSO6vKUdSSUkPyglKVv9heFc23Yh7vbRp+jvX2eIN+rAa8QJBAOJ7GALaqWPbE/DUu+UIzLbJvNzvCPLj+iUe/td+ot6jVNGOMrIitsEt1r9gf66eGq6WZJ6lY60USIndz0NrdMA=



# Max number of entries in message queue. Default is 10.
#
#MSG_Q_LEN                       10



# Delay in seconds after sending SPA packet, before attempting
# to make the socket connection to the controller. This allows the
# gateway protecting the controller time to receive the SPA packet,
# process it, and open the appropriate firewall port before the SDP
# control client attempts to connect to the controller. This field
# accepts floating point arguments down to the nanosecond. The 
# range is 0 to 10 seconds, but if the field is set to zero or not
# set, it defaults to 0.5 seconds.
#
#POST_SPA_DELAY                  0.000000001



# Socket read timeout in seconds. Default is 1.
#
#READ_TIMEOUT                    1



# Socket write timeout in seconds. Default is 1.
#
#WRITE_TIMEOUT                   1



# Seconds to wait between successful requests to update credentials.
# This is not to be confused with the failed request retry interval
# described below. A credential update includes the client's HMAC
# and encryption keys for sending SPA packets, as well as an
# encryption key and client certificate for secure, encrypted
# connections to the SDP network. Default is 7200.
# 
#CREDENTIAL_UPDATE_INTERVAL      7200



# Seconds to wait between successful requests to update credentials.
# This is not to be confused with the failed request retry interval
# described below. Default is 86400.
# 
#ACCESS_UPDATE_INTERVAL          7200



# Maximum number of attempts to connect to the Controller before 
# the client declares failure and exits. Default is 3.
#
#MAX_CONN_ATTEMPTS               3



# Seconds to wait if a first connection attempt fails. This interval
# automatically doubles with successive failures. Default is 5.
#
#INITIAL_CONN_RETRY_INTERVAL     5



# Seconds to wait between keep alive requests if the client is
# configured to remain connected. These requests are at the 
# application layer and in addition to the socket layer keep alive
# mechanism. Default is 60.
# 
#KEEP_ALIVE_INTERVAL             60



# Maximum number of successive failed requests before the client
# declares failure and exits. Default is 3.
#
#MAX_REQUEST_ATTEMPTS            3



# Seconds to wait if a first request attempt fails. This interval
# automatically doubles with successive failures. This is used
# for requests such as credential update, keep alive, etc. Default
# is 5. 
#
#INITIAL_REQUEST_RETRY_INTERVAL  5



